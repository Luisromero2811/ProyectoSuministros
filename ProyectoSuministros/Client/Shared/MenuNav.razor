@inject SweetAlertService swal
@inject NavigationManager navigate
@inject IJSRuntime js
@inject IRepositorio repositorio
<AuthorizeView Context="MenuGeneral">
    <Authorized>
        <div class="col-12 gsum-bg-rojo text-white row d-flex m-0 align-items-center">
            <!-- Botón de menú lateral a la izquierda -->
            <div class="col-auto d-flex">
                <button class="btn gsum-bg-rojo my-auto text-white" @onclick="OpenMenuLateral" id="buttonSidepanel">
                    <i class="fa fa-solid fa-bars"></i>
                </button>
            </div>

            <!-- Espacio a la izquierda para empujar el contenido hacia la derecha -->
            <div class="col"></div>

            <!-- Contenedor de usuario e información de sesión a la derecha -->
            <div class="col-auto d-flex align-items-center">
                @if (MenuGeneral.User.Identity is not null)
                {
                    <p class="my-auto mb-2 me-4">
                        @MenuGeneral.User.Identity.Name
                    </p>
                }
                <button class="btn text-white" @onclick="@CerrarSesion">Cerrar sesión</button>
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {

    private async void OpenMenuLateral()
    {
        await js.InvokeVoidAsync("OpenMenu");
    }

    private async void CerrarSesion()
    {
        try
        {
            navigate.NavigateTo("/login");
        }
        catch (Exception e)
        {
            await swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
}
