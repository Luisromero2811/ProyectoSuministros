@inject IRepositorio repositorio
@inject SweetAlertService Swal
@inject IJSRuntime js
@inject GestionZonaValidation gestionZona

<div class="card">
    <div class="card-header">
        <b>Catalogo de Zonas</b>
    </div>
    <div class="card-body">
        <div class="col-12">
            <EditForm Model="Zona" class="form col-12" OnValidSubmit="@SaveZona" Context="validacion">
                <FluentValidationValidator Validator="gestionZona" />
                <ValidationSummary />
                <div class="col-12 row">
                    <div class="col-3">
                        <label>Nombre de la Zona:</label>
                        <InputText @bind-Value="Zona.Nombre" class="form-control" MaxLenght="40" />
                    </div>
                    <div class="col-3 d-flex mt-auto">
                        @if (!isEdit)
                        {
                            <button class="col-12 btn gsum-bg-amarillo" type="submit">
                                <i class="fa fa-solid fa-plus"></i> Registrar Zona
                            </button>
                        }
                        else
                        {
                            <button class="col mx-2 btn gsum-bg-amarillo" type="submit">
                                <i class="fa fa-solid fa-check"></i>
                            </button>
                            <button class="col mx-2 btn gsum-bg-amarillo" @onclick="@cancelEdit" type="button">
                                <i class="fa fa-solid fa-xmark"></i>
                            </button>
                        }
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>
<!--Tabla de muestreo de datos-->
<div class="card mt-2" style="height: 500px; overflow: scroll;">
    <div class="card-header">
        <b>Gestión de Zonas</b>
    </div>
    <div class="card-body">
        <div class="col-12 row">
            <div class="col-12">
                <table class="table table-sm table-stripped table-bordered">
                    <thead>
                        <tr>
                            <th>Nombre de la Zona</th>
                            <th>Estado</th>
                            <th>Editar</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Zonas.Count > 0)
                        {
                            <Virtualize Items="Zonas" TItem="Zona" Context="item">
                                <tr>
                                    <td>@item.Nombre</td>
                                    <!--Estado-->
                                    <td>
                                        <div class="form-check form-switch mx-2">
                                            <input class="form-check-input" type="checkbox" role="switch" id="@item.ID" checked="@item.Activo"
                                                   @onchange="((ChangeEventArgs e) => HabilitarDeshabilitar(item, e))">
                                        </div>
                                    </td>
                                    <!--Editar-->
                                    <td>
                                        <button class="btn btn-sm gcom-bg-amarillo" @onclick="@(()=>@SetZona(item))">
                                            <i class="fa fa-solid fa-edit"></i>
                                        </button>
                                    </td>
                                </tr>
                            </Virtualize>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>


@code {
    public Zona Zona { get; set; } = new Zona();
    public List<Zona> Zonas { get; set; } = new List<Zona>();

    bool isEdit = false;

    private async Task SaveZona()
    {
        try
        {
            var responseHttp = await repositorio.Post<Zona>($"api/grupo/save", Zona);
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await Swal.FireAsync("Éxito", $"Zona {Zona.Nombre} ha sido creado con éxito", SweetAlertIcon.Success);
                //await Obtener_Grupos();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task HabilitarDeshabilitar(Zona gt, ChangeEventArgs tp)
    {
        try
        {
            var status = (bool)tp.Value!;
            var responseHttp = await repositorio.Put<bool>($"api/zona/desactivarZona/{gt.ID}", status);
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                if (status)
                {
                    await Message($"{gt.Nombre} ha sido habilitado", SweetAlertIcon.Info);
                }
                else
                {
                    await Message($"{gt.Nombre} ha sido deshabilitado", SweetAlertIcon.Info);
                }
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Message(string Message, SweetAlertIcon icon)
    {
        await Swal.Mixin(new SweetAlertOptions
        {
            Position = "top-end",
            ShowConfirmButton = false,
            Timer = 1800,
            Toast = true,
        }).FireAsync(new SweetAlertOptions { Icon = icon, Text = Message });
    }

    private void SetZona(Zona zonas)
    {
        try
        {
            isEdit = true;
            Zona = zonas;
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    private async void cancelEdit()
    {
        isEdit = false;
        Zona = new Zona();
    }

}

