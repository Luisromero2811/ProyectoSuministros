@inject IRepositorio repositorio
@inject SweetAlertService Swal
@inject IJSRuntime js
@inject GestionEjecutivosValidation gestionEjecutivos
@inject EjecutiveDestinationValidation gestionRelation

<div class="card">
    <div class="card-header">
        <b>Catalogo de Ejecutivos</b>
    </div>
    <div class="card-body">
        <div class="col-12">
            <EditForm Model="Ejecutivo" class="form col-12" OnValidSubmit="@SaveEjecutivo" Context="validacion">
                <FluentValidationValidator Validator="gestionEjecutivos" />
                <ValidationSummary />
                <div class="col-12 row">
                    <div class="col-3">
                        <label>Nombre del Ejecutivo:</label>
                        <InputText @bind-Value="Ejecutivo.Nombre" class="form-control" MaxLenght="40" />
                    </div>
                    <div class="col-3 d-flex mt-auto">
                        @if (!isEdit)
                        {
                            <button class="col-12 btn gsum-bg-amarillo" type="submit">
                                <i class="fa fa-solid fa-plus"></i> Registrar Ejecutivo
                            </button>
                        }
                        else
                        {
                            <button class="col mx-2 btn gsum-bg-amarillo" type="submit">
                                <i class="fa fa-solid fa-check"></i>
                            </button>
                            <button class="col mx-2 btn gsum-bg-amarillo" @onclick="@cancelEdit" type="button">
                                <i class="fa fa-solid fa-xmark"></i>
                            </button>
                        }
                    </div>
                </div>
            </EditForm>
            <EditForm Model="@EjecutivoDestinoDTO" class="col-12" OnValidSubmit="@RelationEjecutivo" Context="item">
                <FluentValidationValidator Validator="gestionRelation" />
                <ValidationSummary />
                <h6>Relacion Ejecutivo-Destino</h6>
                <div class="col-12 row">
                    <div class="col-4 row">
                        <label>Ejecutivo:</label>
                        <RadzenDropDown @bind-Value="EjecutivoDestinoDTO.ejecutivo" Data="EjecutivosList" TValue="Ejecutivo" TextProperty="Nombre"
                                        AllowVirtualization="true" AllowFiltering="true"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" class="col-12">
                            <Template>
                                @((context as Ejecutivo)?.Nombre)
                            </Template>
                            <ValueTemplate>
                                @((context as Ejecutivo)?.Nombre)
                            </ValueTemplate>
                        </RadzenDropDown>
                    </div>
                    <div class="col-4">
                        <label>Destino:</label>
                        <RadzenDropDown @bind-Value="EjecutivoDestinoDTO.destino" Data="DestinoEjecutivo" TValue="CodDenDTO" TextProperty="Den"
                                        AllowVirtualization="true" AllowFiltering="true"
                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" class="col-12">
                        </RadzenDropDown>
                    </div>
                    <div class="col-3 d-flex mt-auto">
                        <button class="col-12 mx-auto btn gsum-bg-amarillo" type="submit">
                            <i class="fa fa-solid fa-plus"></i> Relacionar Destino-Cliente
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!--Tabla de muestreo de datos-->
<div class="card mt-2" style="height: auto; overflow: scroll;">
    <div class="card-header">
        <b>Gestión de Ejecutivos</b>
    </div>
    <div class="card-body">
        <div class="col-12 row">
            <div class="col-12">
                <Tabla Datos="Ejecutivos">
                    <Cabeceras>
                        <tr>
                            <th>Nombre de los Ejecutivos</th>
                            <th>Estado</th>
                            <th>Editar</th>
                        </tr>
                    </Cabeceras>
                    <Filtros>
                        <tr class="fila">
                            <td>
                                <input class="form-control form-control-sm" @oninput="LoadData" @bind="busquedaCatalogo.nombreEjecutivo" />
                            </td>
                            <td></td>
                            <td></td>
                        </tr>
                    </Filtros>
                    <Columnas Context="item">
                        <tr>
                            <td>@item.Nombre</td>
                            <!--Estado-->
                            <td>
                                <div class="form-check form-switch mx-2">
                                    <input class="form-check-input" type="checkbox" role="switch" id="@item.ID" checked="@item.Activo"
                                           @onchange="((ChangeEventArgs e) => HabilitarDeshabilitar(item, e))">
                                </div>
                            </td>
                            <!--Editar-->
                            <td>
                                <button class="btn btn-sm gsum-bg-amarillo" @onclick="@(()=>@SetEjecutivo(item))">
                                    <i class="fa fa-solid fa-edit"></i>
                                </button>
                            </td>
                        </tr>
                    </Columnas>
                </Tabla>
            </div>
        </div>
    </div>
</div>
<div class="card mt-2" style="height: 200px; overflow: scroll;">
    <div class="card-header">
        <b>Filtrado de Ejecutivos</b>
    </div>
    <div class="card-body">
        <div class="col-12 row">
            <div class="col-3 mb-2">
                <label>Destino:</label>
                <DropDownFilter Listado="DestinosFiltro" TListado="Destinos" TValue="int?" Propiedad_Valor="IDEjecutivo" On_Change_Method="@ChangeEjecutive" @bind-Valor="DestinoFiltro.IDEjecutivo"
                                Default_Placeholder="Seleccione un Destino" FiltrarValor="Obtener_Ejecutivos">
                    <RenderValue>
                        @context.NomMS - @context.Estacion - @context.IDGob
                    </RenderValue>
                    <Render>
                        @context.NomMS - @context.Estacion - @context.IDGob
                    </Render>
                </DropDownFilter>
            </div>
        </div>
        <div class="col-12">
            <Tabla Datos="EjecutivoFiltro">
                <Cabeceras>
                    <tr>
                        <th>Nombre del Ejecutivo</th>
                    </tr>
                </Cabeceras>
                <Columnas Context="item">
                    <tr>
                        <td>
                            @item.Nombre
                        </td>
                    </tr>
                </Columnas>
            </Tabla>
        </div>
    </div>
</div>

@code {
    public Ejecutivo Ejecutivo { get; set; } = new Ejecutivo();
    public List<Ejecutivo> Ejecutivos { get; set; } = new List<Ejecutivo>();
    public List<Ejecutivo> EjecutivosList { get; set; } = new List<Ejecutivo>();

    //Filtrado de destinos para saber sus ejecutivos
    public List<Ejecutivo> EjecutivoFiltro { get; set; } = new List<Ejecutivo>();
    public List<Destinos> DestinosFiltro { get; set; } = new List<Destinos>();
    public Destinos DestinoFiltro { get; set; } = new Destinos();
    //Termina propiedades para filtrado de destino para conocer sus ejecutivos

    public EjecutivoDestinoDTO EjecutivoDestinoDTO { get; set; } = new EjecutivoDestinoDTO();

    public IEnumerable<CodDenDTO> DestinoEjecutivo { get; set; } = new List<CodDenDTO>();

    Dictionary<string, string> query = new Dictionary<string, string>();
    ParametrosBusquedaCatalogo busquedaCatalogo = new ParametrosBusquedaCatalogo();

    bool isEdit = false;

    protected override async Task OnInitializedAsync()
    {
        await GetEjecutivo();
        await GetEjecutivos();
        await GetDestinoIList();
        await GetDestinosList();
        await Obtener_Ejecutivos(string.Empty);
    }

    private async Task SaveEjecutivo()
    {
        try
        {
            var responseHttp = await repositorio.Post<Ejecutivo>($"api/ejecutivo/save", Ejecutivo);
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await Swal.FireAsync("Éxito", $"Ejecutivo {Ejecutivo.Nombre} ha sido creado con éxito", SweetAlertIcon.Success);
                await GetEjecutivo();
                await GetEjecutivos();
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task LoadData(ChangeEventArgs args)
    {
        busquedaCatalogo.nombreEjecutivo = args.Value?.ToString() ?? string.Empty;
        await GetEjecutivo();
    }

    private async Task GetDestinoIList()
    {
        try
        {
            var response = await repositorio.Get<IList<CodDenDTO>>("api/destinos/listados");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                StateHasChanged();
                DestinoEjecutivo = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetEjecutivo()
    {
        try
        {
            query = new Dictionary<string, string>();
            query["nombreEjecutivo"] = busquedaCatalogo.nombreEjecutivo;
            var uri = Constructor_De_URL_Parametros.Generar_URL(query);
            var responseHttp = await repositorio.Get<List<Ejecutivo>>($"api/ejecutivo/list?{uri}");
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                Ejecutivos = responseHttp.Response!;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetEjecutivos()
    {
        try
        {
            var responseHttp = await repositorio.Get<List<Ejecutivo>>($"api/ejecutivo/listado");
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                EjecutivosList = responseHttp.Response!;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task HabilitarDeshabilitar(Ejecutivo gt, ChangeEventArgs tp)
    {
        try
        {
            var status = (bool)tp.Value!;
            var responseHttp = await repositorio.Put<bool>($"api/ejecutivo/{gt.ID}", status);
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                if (status)
                {
                    await Message($"{gt.Nombre} ha sido habilitado", SweetAlertIcon.Info);
                }
                else
                {
                    await Message($"{gt.Nombre} ha sido deshabilitado", SweetAlertIcon.Info);
                }
            }

        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Message(string Message, SweetAlertIcon icon)
    {
        await Swal.Mixin(new SweetAlertOptions
        {
            Position = "top-end",
            ShowConfirmButton = false,
            Timer = 1800,
            Toast = true,
        }).FireAsync(new SweetAlertOptions { Icon = icon, Text = Message });
    }

    private void SetEjecutivo(Ejecutivo ejecutivos)
    {
        try
        {
            isEdit = true;
            Ejecutivo = ejecutivos;
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    private async void cancelEdit()
    {
        isEdit = false;
        Ejecutivo = new Ejecutivo();
    }

    private async Task RelationEjecutivo()
    {
        try
        {
            var response = await repositorio.Post<CodDenDTO>($"api/destinos/asignarEjecutivos/{EjecutivoDestinoDTO.ejecutivo.ID}", EjecutivoDestinoDTO.destino);
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                await Swal.FireAsync("Exito", $"Destino Asignado a {EjecutivoDestinoDTO.ejecutivo.Nombre}", SweetAlertIcon.Success);
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task GetDestinosList()
    {
        try
        {
            var responseHttp = await repositorio.Get<List<Destinos>>($"api/destinos/listado");
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                DestinosFiltro = responseHttp.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ChangeEjecutive()
    {
        try
        {
            query = new Dictionary<string, string>();
            query["IDEjecutivo"] = DestinoFiltro.IDEjecutivo.ToString() ?? string.Empty;
            var uri = Constructor_De_URL_Parametros.Generar_URL(query);
            var responseHttp = await repositorio.Get<List<Ejecutivo>>($"api/destinos/listaEjecutivo?{uri}");
            if (responseHttp.Error)
            {
                var message = await responseHttp.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                EjecutivoFiltro = responseHttp.Response!;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Obtener_Ejecutivos(string value)
    {
        try
        {
            Dictionary<string, string> query = new();
            query["NomMS"] = value;

            var uri = Constructor_De_URL_Parametros.Generar_URL(query);

            var response = await repositorio.Get<List<Destinos>>($"api/destinos/filtraractivos?{uri}");
            if (response.Error)
            {
                var message = await response.ObtenerMensajeError();
                await Swal.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            else
            {
                StateHasChanged();
                DestinosFiltro = response.Response;
            }
        }
        catch (Exception e)
        {
            await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

}

