@page "/facturas"
@inject IRepositorio repositorio
@inject IJSRuntime js
@inject SweetAlertService Swal
@inject ILogger<FacturasComponent> Logger

<div class="d-flex justify-content-center col-12 shadow-sm mt-3">
    <div class="col-12 card">
        <div class="card-header">
            <b>Facturas</b>
        </div>
        <div class="col-12 row card-body">
            <div class="col-12 row mb-3">
                <div class="col-10">
                    <div class="form-label">
                        <label class="form-label">Importar:</label>
                        <InputFile accept=".xlsx,.xls" class="form-control form-control-sm" OnChange="Subir_Facturas" multiple />
                        @if (loading_upload)
                        {
                            <SpinnerLoading />
                        }
                    </div>
                </div>
            </div>
            <hr />
        </div>
    </div>
</div>

@code {
    bool loading_upload = false;

    private List<File> files = new();
    private List<UploadResult> UploadResults = new();

    private class File
    {
        public string Name { get; set; } = string.Empty;
    }

    private async Task Subir_Facturas(InputFileChangeEventArgs args)
    {
        long MaxAllowedSize = 1024 * 15 * 1024;
        bool upload = false;
        int MaxAllowedFiles = 10;

        files = new();

        using var content = new MultipartFormDataContent();
        foreach (var file in args.GetMultipleFiles(MaxAllowedFiles))
        {
            try
            {
                files.Add(new() { Name = file.Name });
                var filecontent = new StreamContent(file.OpenReadStream(MaxAllowedSize));
                filecontent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

                content.Add(content: filecontent, name: "\"files\"", fileName: file.Name);
                upload = true;
            }
            catch (Exception ex)
            {
                Logger.LogInformation("{FileName} no se ha subido. (Err: 1) {Message}", file.Name, ex.Message);
                UploadResults.Add(new()
                {
                    FileName = file.Name,
                    ErrorCode = 1,
                    Upload = false
                });
            }

            if (upload)
            {
                loading_upload = true;
                try
                {
                    var response = await repositorio.PostFile("api/facturas/file", content);
                    if (response.Error)
                    {
                        loading_upload = false;
                        await Swal.FireAsync("Error", await response.ObtenerMensajeError(), SweetAlertIcon.Error);
                    }
                    else
                    {
                        loading_upload = false;
                        await Swal.FireAsync("Éxito", "Las facturas fueron guardadas con éxito", SweetAlertIcon.Success);
                        //await LoadData();
                    }
                }
                catch (Exception e)
                {
                    loading_upload = false;
                    await Swal.FireAsync("Error", e.Message, SweetAlertIcon.Error);
                }
            }

        }
    }

}

